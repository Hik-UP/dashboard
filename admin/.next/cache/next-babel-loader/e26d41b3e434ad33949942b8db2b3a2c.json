{"ast":null,"code":"function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nconst storageName2 = \"user_data\";\nclass UserDataService {\n  constructor() {\n    _defineProperty(this, \"userData\", null);\n  }\n  get() {\n    if (this.userData) return this.userData;\n    if (localStorage === undefined) return null;\n    const userData = localStorage.getItem(storageName2);\n    this.userData = userData;\n    return userData;\n  }\n  set(userData) {\n    this.userData = userData;\n    const tmp =\n    //let key = \"token\";\n    //let cleanJsonRegex = new RegExp(`,.*${key}.*[, ]`, \"g\");\n    //console.log(\"user_data\" + JSON.stringify(userData));\n    //let nameJsonStr = userData.replace(cleanJsonRegex, \"\");\n    localStorage.setItem(storageName2, JSON.stringify(nameJsonStr));\n  }\n  remove() {\n    this.userData = null;\n    localStorage.removeItem(storageName2);\n  }\n}\nconst service = new UserDataService();\nexport default service;","map":{"version":3,"names":["storageName2","UserDataService","constructor","_defineProperty","get","userData","localStorage","undefined","getItem","set","tmp","setItem","JSON","stringify","nameJsonStr","remove","removeItem","service"],"sources":["/Users/draki/Documents/Epitech/EIP/admin/services/UserDataService.js"],"sourcesContent":["const storageName2 = \"user_data\";\n\nclass UserDataService {\n    userData = null;\n\n    get() {\n        if (this.userData)\n            return this.userData;\n\n        if (localStorage === undefined)\n            return null;\n        const userData = localStorage.getItem(storageName2);\n        this.userData = userData\n        return userData;\n    }\n\n    set(userData) {\n        this.userData = userData;\n        const tmp = \n        //let key = \"token\";\n        //let cleanJsonRegex = new RegExp(`,.*${key}.*[, ]`, \"g\");\n        //console.log(\"user_data\" + JSON.stringify(userData));\n        //let nameJsonStr = userData.replace(cleanJsonRegex, \"\");\n        localStorage.setItem(storageName2, JSON.stringify(nameJsonStr));\n    }\n\n    remove() {\n        this.userData = null;\n        localStorage.removeItem(storageName2);\n    }\n}\n\nconst service = new UserDataService();\nexport default service;\n"],"mappings":";;;AAAA,MAAMA,YAAY,GAAG,WAAW;AAEhC,MAAMC,eAAe,CAAC;EAAAC,YAAA;IAAAC,eAAA,mBACP,IAAI;EAAA;EAEfC,GAAGA,CAAA,EAAG;IACF,IAAI,IAAI,CAACC,QAAQ,EACb,OAAO,IAAI,CAACA,QAAQ;IAExB,IAAIC,YAAY,KAAKC,SAAS,EAC1B,OAAO,IAAI;IACf,MAAMF,QAAQ,GAAGC,YAAY,CAACE,OAAO,CAACR,YAAY,CAAC;IACnD,IAAI,CAACK,QAAQ,GAAGA,QAAQ;IACxB,OAAOA,QAAQ;EACnB;EAEAI,GAAGA,CAACJ,QAAQ,EAAE;IACV,IAAI,CAACA,QAAQ,GAAGA,QAAQ;IACxB,MAAMK,GAAG;IACT;IACA;IACA;IACA;IACAJ,YAAY,CAACK,OAAO,CAACX,YAAY,EAAEY,IAAI,CAACC,SAAS,CAACC,WAAW,CAAC,CAAC;EACnE;EAEAC,MAAMA,CAAA,EAAG;IACL,IAAI,CAACV,QAAQ,GAAG,IAAI;IACpBC,YAAY,CAACU,UAAU,CAAChB,YAAY,CAAC;EACzC;AACJ;AAEA,MAAMiB,OAAO,GAAG,IAAIhB,eAAe,CAAC,CAAC;AACrC,eAAegB,OAAO"},"metadata":{},"sourceType":"module"}